DataFusion Logical Plan
=======================

Limit: skip=0, fetch=100
  Sort: supplier.s_acctbal DESC NULLS FIRST, nation.n_name ASC NULLS LAST, supplier.s_name ASC NULLS LAST, part.p_partkey ASC NULLS LAST, fetch=100
    Projection: supplier.s_acctbal, supplier.s_name, nation.n_name, part.p_partkey, part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment
      Inner Join: part.p_partkey = __scalar_sq_1.ps_partkey, partsupp.ps_supplycost = __scalar_sq_1.min(partsupp.ps_supplycost)
        Projection: part.p_partkey, part.p_mfgr, supplier.s_name, supplier.s_address, supplier.s_phone, supplier.s_acctbal, supplier.s_comment, partsupp.ps_supplycost, nation.n_name
          Inner Join: nation.n_regionkey = region.r_regionkey
            Projection: part.p_partkey, part.p_mfgr, supplier.s_name, supplier.s_address, supplier.s_phone, supplier.s_acctbal, supplier.s_comment, partsupp.ps_supplycost, nation.n_name, nation.n_regionkey
              Inner Join: supplier.s_nationkey = nation.n_nationkey
                Projection: part.p_partkey, part.p_mfgr, supplier.s_name, supplier.s_address, supplier.s_nationkey, supplier.s_phone, supplier.s_acctbal, supplier.s_comment, partsupp.ps_supplycost
                  Inner Join: partsupp.ps_suppkey = supplier.s_suppkey
                    Projection: part.p_partkey, part.p_mfgr, partsupp.ps_suppkey, partsupp.ps_supplycost
                      Inner Join: part.p_partkey = partsupp.ps_partkey
                        Projection: part.p_partkey, part.p_mfgr
                          Filter: part.p_size = Int32(48) AND part.p_type LIKE Utf8("%TIN")
                            TableScan: part projection=[p_partkey, p_mfgr, p_type, p_size], partial_filters=[part.p_size = Int32(48), part.p_type LIKE Utf8("%TIN")]
                        TableScan: partsupp projection=[ps_partkey, ps_suppkey, ps_supplycost]
                    TableScan: supplier projection=[s_suppkey, s_name, s_address, s_nationkey, s_phone, s_acctbal, s_comment]
                TableScan: nation projection=[n_nationkey, n_name, n_regionkey]
            Projection: region.r_regionkey
              Filter: region.r_name = Utf8("ASIA")
                TableScan: region projection=[r_regionkey, r_name], partial_filters=[region.r_name = Utf8("ASIA")]
        SubqueryAlias: __scalar_sq_1
          Projection: min(partsupp.ps_supplycost), partsupp.ps_partkey
            Aggregate: groupBy=[[partsupp.ps_partkey]], aggr=[[min(partsupp.ps_supplycost)]]
              Projection: partsupp.ps_partkey, partsupp.ps_supplycost
                Inner Join: nation.n_regionkey = region.r_regionkey
                  Projection: partsupp.ps_partkey, partsupp.ps_supplycost, nation.n_regionkey
                    Inner Join: supplier.s_nationkey = nation.n_nationkey
                      Projection: partsupp.ps_partkey, partsupp.ps_supplycost, supplier.s_nationkey
                        Inner Join: partsupp.ps_suppkey = supplier.s_suppkey
                          TableScan: partsupp projection=[ps_partkey, ps_suppkey, ps_supplycost]
                          TableScan: supplier projection=[s_suppkey, s_nationkey]
                      TableScan: nation projection=[n_nationkey, n_regionkey]
                  Projection: region.r_regionkey
                    Filter: region.r_name = Utf8("ASIA")
                      TableScan: region projection=[r_regionkey, r_name], partial_filters=[region.r_name = Utf8("ASIA")]

DataFusion Physical Plan
========================

GlobalLimitExec: skip=0, fetch=100
  SortPreservingMergeExec: [s_acctbal@0 DESC,n_name@2 ASC NULLS LAST,s_name@1 ASC NULLS LAST,p_partkey@3 ASC NULLS LAST], fetch=100
    SortExec: TopK(fetch=100), expr=[s_acctbal@0 DESC,n_name@2 ASC NULLS LAST,s_name@1 ASC NULLS LAST,p_partkey@3 ASC NULLS LAST], preserve_partitioning=[true]
      ProjectionExec: expr=[s_acctbal@5 as s_acctbal, s_name@2 as s_name, n_name@7 as n_name, p_partkey@0 as p_partkey, p_mfgr@1 as p_mfgr, s_address@3 as s_address, s_phone@4 as s_phone, s_comment@6 as s_comment]
        CoalesceBatchesExec: target_batch_size=8192
          HashJoinExec: mode=Partitioned, join_type=Inner, on=[(p_partkey@0, ps_partkey@1), (ps_supplycost@7, min(partsupp.ps_supplycost)@0)], projection=[p_partkey@0, p_mfgr@1, s_name@2, s_address@3, s_phone@4, s_acctbal@5, s_comment@6, n_name@8]
            CoalesceBatchesExec: target_batch_size=8192
              RepartitionExec: partitioning=Hash([p_partkey@0, ps_supplycost@7], 2), input_partitions=2
                CoalesceBatchesExec: target_batch_size=8192
                  HashJoinExec: mode=Partitioned, join_type=Inner, on=[(r_regionkey@0, n_regionkey@9)], projection=[p_partkey@1, p_mfgr@2, s_name@3, s_address@4, s_phone@5, s_acctbal@6, s_comment@7, ps_supplycost@8, n_name@9]
                    CoalesceBatchesExec: target_batch_size=8192
                      RepartitionExec: partitioning=Hash([r_regionkey@0], 2), input_partitions=2
                        RepartitionExec: partitioning=RoundRobinBatch(2), input_partitions=1
                          ProjectionExec: expr=[r_regionkey@0 as r_regionkey]
                            CoalesceBatchesExec: target_batch_size=8192
                              FilterExec: r_name@1 = ASIA
                                ParquetExec: file_groups={ ... }, projection=[r_regionkey, r_name], predicate=r_name@1 = ASIA, pruning_predicate=CASE WHEN r_name_null_count@2 = r_name_row_count@3 THEN false ELSE r_name_min@0 <= ASIA AND ASIA <= r_name_max@1 END, required_guarantees=[r_name in (ASIA)]
                    CoalesceBatchesExec: target_batch_size=8192
                      RepartitionExec: partitioning=Hash([n_regionkey@9], 2), input_partitions=2
                        ProjectionExec: expr=[p_partkey@2 as p_partkey, p_mfgr@3 as p_mfgr, s_name@4 as s_name, s_address@5 as s_address, s_phone@6 as s_phone, s_acctbal@7 as s_acctbal, s_comment@8 as s_comment, ps_supplycost@9 as ps_supplycost, n_name@0 as n_name, n_regionkey@1 as n_regionkey]
                          CoalesceBatchesExec: target_batch_size=8192
                            HashJoinExec: mode=Partitioned, join_type=Inner, on=[(n_nationkey@0, s_nationkey@4)], projection=[n_name@1, n_regionkey@2, p_partkey@3, p_mfgr@4, s_name@5, s_address@6, s_phone@8, s_acctbal@9, s_comment@10, ps_supplycost@11]
                              CoalesceBatchesExec: target_batch_size=8192
                                RepartitionExec: partitioning=Hash([n_nationkey@0], 2), input_partitions=1
                                  ParquetExec: file_groups={ ... }, projection=[n_nationkey, n_name, n_regionkey]
                              CoalesceBatchesExec: target_batch_size=8192
                                RepartitionExec: partitioning=Hash([s_nationkey@4], 2), input_partitions=2
                                  ProjectionExec: expr=[p_partkey@6 as p_partkey, p_mfgr@7 as p_mfgr, s_name@0 as s_name, s_address@1 as s_address, s_nationkey@2 as s_nationkey, s_phone@3 as s_phone, s_acctbal@4 as s_acctbal, s_comment@5 as s_comment, ps_supplycost@8 as ps_supplycost]
                                    CoalesceBatchesExec: target_batch_size=8192
                                      HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_suppkey@0, ps_suppkey@2)], projection=[s_name@1, s_address@2, s_nationkey@3, s_phone@4, s_acctbal@5, s_comment@6, p_partkey@7, p_mfgr@8, ps_supplycost@10]
                                        CoalesceBatchesExec: target_batch_size=8192
                                          RepartitionExec: partitioning=Hash([s_suppkey@0], 2), input_partitions=2
                                            RepartitionExec: partitioning=RoundRobinBatch(2), input_partitions=1
                                              ParquetExec: file_groups={ ... }, projection=[s_suppkey, s_name, s_address, s_nationkey, s_phone, s_acctbal, s_comment]
                                        CoalesceBatchesExec: target_batch_size=8192
                                          RepartitionExec: partitioning=Hash([ps_suppkey@2], 2), input_partitions=2
                                            CoalesceBatchesExec: target_batch_size=8192
                                              HashJoinExec: mode=Partitioned, join_type=Inner, on=[(p_partkey@0, ps_partkey@0)], projection=[p_partkey@0, p_mfgr@1, ps_suppkey@3, ps_supplycost@4]
                                                CoalesceBatchesExec: target_batch_size=8192
                                                  RepartitionExec: partitioning=Hash([p_partkey@0], 2), input_partitions=2
                                                    ProjectionExec: expr=[p_partkey@0 as p_partkey, p_mfgr@1 as p_mfgr]
                                                      CoalesceBatchesExec: target_batch_size=8192
                                                        FilterExec: p_size@3 = 48 AND p_type@2 LIKE %TIN
                                                          RepartitionExec: partitioning=RoundRobinBatch(2), input_partitions=1
                                                            ParquetExec: file_groups={ ... }, projection=[p_partkey, p_mfgr, p_type, p_size], predicate=p_size@5 = 48 AND p_type@4 LIKE %TIN, pruning_predicate=CASE WHEN p_size_null_count@2 = p_size_row_count@3 THEN false ELSE p_size_min@0 <= 48 AND 48 <= p_size_max@1 END, required_guarantees=[p_size in (48)]
                                                CoalesceBatchesExec: target_batch_size=8192
                                                  RepartitionExec: partitioning=Hash([ps_partkey@0], 2), input_partitions=2
                                                    ParquetExec: file_groups={ ... }, projection=[ps_partkey, ps_suppkey, ps_supplycost]
            CoalesceBatchesExec: target_batch_size=8192
              RepartitionExec: partitioning=Hash([ps_partkey@1, min(partsupp.ps_supplycost)@0], 2), input_partitions=2
                ProjectionExec: expr=[min(partsupp.ps_supplycost)@1 as min(partsupp.ps_supplycost), ps_partkey@0 as ps_partkey]
                  AggregateExec: mode=FinalPartitioned, gby=[ps_partkey@0 as ps_partkey], aggr=[min(partsupp.ps_supplycost)]
                    CoalesceBatchesExec: target_batch_size=8192
                      RepartitionExec: partitioning=Hash([ps_partkey@0], 2), input_partitions=2
                        AggregateExec: mode=Partial, gby=[ps_partkey@0 as ps_partkey], aggr=[min(partsupp.ps_supplycost)]
                          CoalesceBatchesExec: target_batch_size=8192
                            HashJoinExec: mode=Partitioned, join_type=Inner, on=[(r_regionkey@0, n_regionkey@2)], projection=[ps_partkey@1, ps_supplycost@2]
                              CoalesceBatchesExec: target_batch_size=8192
                                RepartitionExec: partitioning=Hash([r_regionkey@0], 2), input_partitions=2
                                  RepartitionExec: partitioning=RoundRobinBatch(2), input_partitions=1
                                    ProjectionExec: expr=[r_regionkey@0 as r_regionkey]
                                      CoalesceBatchesExec: target_batch_size=8192
                                        FilterExec: r_name@1 = ASIA
                                          ParquetExec: file_groups={ ... }, projection=[r_regionkey, r_name], predicate=r_name@1 = ASIA, pruning_predicate=CASE WHEN r_name_null_count@2 = r_name_row_count@3 THEN false ELSE r_name_min@0 <= ASIA AND ASIA <= r_name_max@1 END, required_guarantees=[r_name in (ASIA)]
                              CoalesceBatchesExec: target_batch_size=8192
                                RepartitionExec: partitioning=Hash([n_regionkey@2], 2), input_partitions=2
                                  ProjectionExec: expr=[ps_partkey@1 as ps_partkey, ps_supplycost@2 as ps_supplycost, n_regionkey@0 as n_regionkey]
                                    CoalesceBatchesExec: target_batch_size=8192
                                      HashJoinExec: mode=Partitioned, join_type=Inner, on=[(n_nationkey@0, s_nationkey@2)], projection=[n_regionkey@1, ps_partkey@2, ps_supplycost@3]
                                        CoalesceBatchesExec: target_batch_size=8192
                                          RepartitionExec: partitioning=Hash([n_nationkey@0], 2), input_partitions=1
                                            ParquetExec: file_groups={ ... }, projection=[n_nationkey, n_regionkey]
                                        CoalesceBatchesExec: target_batch_size=8192
                                          RepartitionExec: partitioning=Hash([s_nationkey@2], 2), input_partitions=2
                                            ProjectionExec: expr=[ps_partkey@1 as ps_partkey, ps_supplycost@2 as ps_supplycost, s_nationkey@0 as s_nationkey]
                                              CoalesceBatchesExec: target_batch_size=8192
                                                HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_suppkey@0, ps_suppkey@1)], projection=[s_nationkey@1, ps_partkey@2, ps_supplycost@4]
                                                  CoalesceBatchesExec: target_batch_size=8192
                                                    RepartitionExec: partitioning=Hash([s_suppkey@0], 2), input_partitions=2
                                                      RepartitionExec: partitioning=RoundRobinBatch(2), input_partitions=1
                                                        ParquetExec: file_groups={ ... }, projection=[s_suppkey, s_nationkey]
                                                  CoalesceBatchesExec: target_batch_size=8192
                                                    RepartitionExec: partitioning=Hash([ps_suppkey@1], 2), input_partitions=2
                                                      ParquetExec: file_groups={ ... }, projection=[ps_partkey, ps_suppkey, ps_supplycost]

DataFusion Ray Distributed Plan
===========

Query Stage #0 (1 -> 2):
RayShuffleWriterExec(stage_id=0, output_partitioning=Hash([Column { name: "r_regionkey", index: 0 }], 2))
  ProjectionExec: expr=[r_regionkey@0 as r_regionkey]
    CoalesceBatchesExec: target_batch_size=8192
      FilterExec: r_name@1 = ASIA
        ParquetExec: file_groups={ ... }, projection=[r_regionkey, r_name], predicate=r_name@1 = ASIA, pruning_predicate=CASE WHEN r_name_null_count@2 = r_name_row_count@3 THEN false ELSE r_name_min@0 <= ASIA AND ASIA <= r_name_max@1 END, required_guarantees=[r_name in (ASIA)]

Query Stage #1 (1 -> 2):
RayShuffleWriterExec(stage_id=1, output_partitioning=Hash([Column { name: "n_nationkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[n_nationkey, n_name, n_regionkey]

Query Stage #2 (1 -> 2):
RayShuffleWriterExec(stage_id=2, output_partitioning=Hash([Column { name: "s_suppkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[s_suppkey, s_name, s_address, s_nationkey, s_phone, s_acctbal, s_comment]

Query Stage #3 (1 -> 2):
RayShuffleWriterExec(stage_id=3, output_partitioning=Hash([Column { name: "p_partkey", index: 0 }], 2))
  ProjectionExec: expr=[p_partkey@0 as p_partkey, p_mfgr@1 as p_mfgr]
    CoalesceBatchesExec: target_batch_size=8192
      FilterExec: p_size@3 = 48 AND p_type@2 LIKE %TIN
        ParquetExec: file_groups={ ... }, projection=[p_partkey, p_mfgr, p_type, p_size], predicate=p_size@5 = 48 AND p_type@4 LIKE %TIN, pruning_predicate=CASE WHEN p_size_null_count@2 = p_size_row_count@3 THEN false ELSE p_size_min@0 <= 48 AND 48 <= p_size_max@1 END, required_guarantees=[p_size in (48)]

Query Stage #4 (2 -> 2):
RayShuffleWriterExec(stage_id=4, output_partitioning=Hash([Column { name: "ps_partkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[ps_partkey, ps_suppkey, ps_supplycost]

Query Stage #5 (2 -> 2):
RayShuffleWriterExec(stage_id=5, output_partitioning=Hash([Column { name: "ps_suppkey", index: 2 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    HashJoinExec: mode=Partitioned, join_type=Inner, on=[(p_partkey@0, ps_partkey@0)], projection=[p_partkey@0, p_mfgr@1, ps_suppkey@3, ps_supplycost@4]
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=3, input_partitioning=Hash([Column { name: "p_partkey", index: 0 }], 2))
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=4, input_partitioning=Hash([Column { name: "ps_partkey", index: 0 }], 2))

Query Stage #6 (2 -> 2):
RayShuffleWriterExec(stage_id=6, output_partitioning=Hash([Column { name: "s_nationkey", index: 4 }], 2))
  ProjectionExec: expr=[p_partkey@6 as p_partkey, p_mfgr@7 as p_mfgr, s_name@0 as s_name, s_address@1 as s_address, s_nationkey@2 as s_nationkey, s_phone@3 as s_phone, s_acctbal@4 as s_acctbal, s_comment@5 as s_comment, ps_supplycost@8 as ps_supplycost]
    CoalesceBatchesExec: target_batch_size=8192
      HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_suppkey@0, ps_suppkey@2)], projection=[s_name@1, s_address@2, s_nationkey@3, s_phone@4, s_acctbal@5, s_comment@6, p_partkey@7, p_mfgr@8, ps_supplycost@10]
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=2, input_partitioning=Hash([Column { name: "s_suppkey", index: 0 }], 2))
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=5, input_partitioning=Hash([Column { name: "ps_suppkey", index: 2 }], 2))

Query Stage #7 (2 -> 2):
RayShuffleWriterExec(stage_id=7, output_partitioning=Hash([Column { name: "n_regionkey", index: 9 }], 2))
  ProjectionExec: expr=[p_partkey@2 as p_partkey, p_mfgr@3 as p_mfgr, s_name@4 as s_name, s_address@5 as s_address, s_phone@6 as s_phone, s_acctbal@7 as s_acctbal, s_comment@8 as s_comment, ps_supplycost@9 as ps_supplycost, n_name@0 as n_name, n_regionkey@1 as n_regionkey]
    CoalesceBatchesExec: target_batch_size=8192
      HashJoinExec: mode=Partitioned, join_type=Inner, on=[(n_nationkey@0, s_nationkey@4)], projection=[n_name@1, n_regionkey@2, p_partkey@3, p_mfgr@4, s_name@5, s_address@6, s_phone@8, s_acctbal@9, s_comment@10, ps_supplycost@11]
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=1, input_partitioning=Hash([Column { name: "n_nationkey", index: 0 }], 2))
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=6, input_partitioning=Hash([Column { name: "s_nationkey", index: 4 }], 2))

Query Stage #8 (2 -> 2):
RayShuffleWriterExec(stage_id=8, output_partitioning=Hash([Column { name: "p_partkey", index: 0 }, Column { name: "ps_supplycost", index: 7 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    HashJoinExec: mode=Partitioned, join_type=Inner, on=[(r_regionkey@0, n_regionkey@9)], projection=[p_partkey@1, p_mfgr@2, s_name@3, s_address@4, s_phone@5, s_acctbal@6, s_comment@7, ps_supplycost@8, n_name@9]
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=0, input_partitioning=Hash([Column { name: "r_regionkey", index: 0 }], 2))
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=7, input_partitioning=Hash([Column { name: "n_regionkey", index: 9 }], 2))

Query Stage #9 (1 -> 2):
RayShuffleWriterExec(stage_id=9, output_partitioning=Hash([Column { name: "r_regionkey", index: 0 }], 2))
  ProjectionExec: expr=[r_regionkey@0 as r_regionkey]
    CoalesceBatchesExec: target_batch_size=8192
      FilterExec: r_name@1 = ASIA
        ParquetExec: file_groups={ ... }, projection=[r_regionkey, r_name], predicate=r_name@1 = ASIA, pruning_predicate=CASE WHEN r_name_null_count@2 = r_name_row_count@3 THEN false ELSE r_name_min@0 <= ASIA AND ASIA <= r_name_max@1 END, required_guarantees=[r_name in (ASIA)]

Query Stage #10 (1 -> 2):
RayShuffleWriterExec(stage_id=10, output_partitioning=Hash([Column { name: "n_nationkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[n_nationkey, n_regionkey]

Query Stage #11 (1 -> 2):
RayShuffleWriterExec(stage_id=11, output_partitioning=Hash([Column { name: "s_suppkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[s_suppkey, s_nationkey]

Query Stage #12 (2 -> 2):
RayShuffleWriterExec(stage_id=12, output_partitioning=Hash([Column { name: "ps_suppkey", index: 1 }], 2))
  ParquetExec: file_groups={ ... }, projection=[ps_partkey, ps_suppkey, ps_supplycost]

Query Stage #13 (2 -> 2):
RayShuffleWriterExec(stage_id=13, output_partitioning=Hash([Column { name: "s_nationkey", index: 2 }], 2))
  ProjectionExec: expr=[ps_partkey@1 as ps_partkey, ps_supplycost@2 as ps_supplycost, s_nationkey@0 as s_nationkey]
    CoalesceBatchesExec: target_batch_size=8192
      HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_suppkey@0, ps_suppkey@1)], projection=[s_nationkey@1, ps_partkey@2, ps_supplycost@4]
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=11, input_partitioning=Hash([Column { name: "s_suppkey", index: 0 }], 2))
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=12, input_partitioning=Hash([Column { name: "ps_suppkey", index: 1 }], 2))

Query Stage #14 (2 -> 2):
RayShuffleWriterExec(stage_id=14, output_partitioning=Hash([Column { name: "n_regionkey", index: 2 }], 2))
  ProjectionExec: expr=[ps_partkey@1 as ps_partkey, ps_supplycost@2 as ps_supplycost, n_regionkey@0 as n_regionkey]
    CoalesceBatchesExec: target_batch_size=8192
      HashJoinExec: mode=Partitioned, join_type=Inner, on=[(n_nationkey@0, s_nationkey@2)], projection=[n_regionkey@1, ps_partkey@2, ps_supplycost@3]
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=10, input_partitioning=Hash([Column { name: "n_nationkey", index: 0 }], 2))
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=13, input_partitioning=Hash([Column { name: "s_nationkey", index: 2 }], 2))

Query Stage #15 (2 -> 2):
RayShuffleWriterExec(stage_id=15, output_partitioning=Hash([Column { name: "ps_partkey", index: 0 }], 2))
  AggregateExec: mode=Partial, gby=[ps_partkey@0 as ps_partkey], aggr=[min(partsupp.ps_supplycost)]
    CoalesceBatchesExec: target_batch_size=8192
      HashJoinExec: mode=Partitioned, join_type=Inner, on=[(r_regionkey@0, n_regionkey@2)], projection=[ps_partkey@1, ps_supplycost@2]
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=9, input_partitioning=Hash([Column { name: "r_regionkey", index: 0 }], 2))
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=14, input_partitioning=Hash([Column { name: "n_regionkey", index: 2 }], 2))

Query Stage #16 (2 -> 2):
RayShuffleWriterExec(stage_id=16, output_partitioning=Hash([Column { name: "ps_partkey", index: 1 }, Column { name: "min(partsupp.ps_supplycost)", index: 0 }], 2))
  ProjectionExec: expr=[min(partsupp.ps_supplycost)@1 as min(partsupp.ps_supplycost), ps_partkey@0 as ps_partkey]
    AggregateExec: mode=FinalPartitioned, gby=[ps_partkey@0 as ps_partkey], aggr=[min(partsupp.ps_supplycost)]
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=15, input_partitioning=Hash([Column { name: "ps_partkey", index: 0 }], 2))

Query Stage #17 (2 -> 2):
RayShuffleWriterExec(stage_id=17, output_partitioning=Hash([Column { name: "p_partkey", index: 3 }], 2))
  SortExec: TopK(fetch=100), expr=[s_acctbal@0 DESC,n_name@2 ASC NULLS LAST,s_name@1 ASC NULLS LAST,p_partkey@3 ASC NULLS LAST], preserve_partitioning=[true]
    ProjectionExec: expr=[s_acctbal@5 as s_acctbal, s_name@2 as s_name, n_name@7 as n_name, p_partkey@0 as p_partkey, p_mfgr@1 as p_mfgr, s_address@3 as s_address, s_phone@4 as s_phone, s_comment@6 as s_comment]
      CoalesceBatchesExec: target_batch_size=8192
        HashJoinExec: mode=Partitioned, join_type=Inner, on=[(p_partkey@0, ps_partkey@1), (ps_supplycost@7, min(partsupp.ps_supplycost)@0)], projection=[p_partkey@0, p_mfgr@1, s_name@2, s_address@3, s_phone@4, s_acctbal@5, s_comment@6, n_name@8]
          CoalesceBatchesExec: target_batch_size=8192
            RayShuffleReaderExec(stage_id=8, input_partitioning=Hash([Column { name: "p_partkey", index: 0 }, Column { name: "ps_supplycost", index: 7 }], 2))
          CoalesceBatchesExec: target_batch_size=8192
            RayShuffleReaderExec(stage_id=16, input_partitioning=Hash([Column { name: "ps_partkey", index: 1 }, Column { name: "min(partsupp.ps_supplycost)", index: 0 }], 2))

Query Stage #18 (1 -> 1):
GlobalLimitExec: skip=0, fetch=100
  SortPreservingMergeExec: [s_acctbal@0 DESC,n_name@2 ASC NULLS LAST,s_name@1 ASC NULLS LAST,p_partkey@3 ASC NULLS LAST], fetch=100
    RayShuffleReaderExec(stage_id=17, input_partitioning=Hash([Column { name: "p_partkey", index: 3 }], 2))

