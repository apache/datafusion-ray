DataFusion Logical Plan
=======================

Sort: custsale.cntrycode ASC NULLS LAST
  Projection: custsale.cntrycode, count(*) AS numcust, sum(custsale.c_acctbal) AS totacctbal
    Aggregate: groupBy=[[custsale.cntrycode]], aggr=[[count(Int64(1)) AS count(*), sum(custsale.c_acctbal)]]
      SubqueryAlias: custsale
        Projection: substr(customer.c_phone, Int64(1), Int64(2)) AS cntrycode, customer.c_acctbal
          Inner Join:  Filter: CAST(customer.c_acctbal AS Decimal128(15, 6)) > __scalar_sq_2.avg(customer.c_acctbal)
            Projection: customer.c_phone, customer.c_acctbal
              LeftAnti Join: customer.c_custkey = __correlated_sq_1.o_custkey
                Filter: substr(customer.c_phone, Int64(1), Int64(2)) IN ([Utf8("24"), Utf8("34"), Utf8("16"), Utf8("30"), Utf8("33"), Utf8("14"), Utf8("13")])
                  TableScan: customer projection=[c_custkey, c_phone, c_acctbal], partial_filters=[substr(customer.c_phone, Int64(1), Int64(2)) IN ([Utf8("24"), Utf8("34"), Utf8("16"), Utf8("30"), Utf8("33"), Utf8("14"), Utf8("13")])]
                SubqueryAlias: __correlated_sq_1
                  TableScan: orders projection=[o_custkey]
            SubqueryAlias: __scalar_sq_2
              Aggregate: groupBy=[[]], aggr=[[avg(customer.c_acctbal)]]
                Projection: customer.c_acctbal
                  Filter: customer.c_acctbal > Decimal128(Some(0),11,2) AND substr(customer.c_phone, Int64(1), Int64(2)) IN ([Utf8("24"), Utf8("34"), Utf8("16"), Utf8("30"), Utf8("33"), Utf8("14"), Utf8("13")])
                    TableScan: customer projection=[c_phone, c_acctbal], partial_filters=[customer.c_acctbal > Decimal128(Some(0),11,2) AS customer.c_acctbal > Decimal128(Some(0),30,15), substr(customer.c_phone, Int64(1), Int64(2)) IN ([Utf8("24"), Utf8("34"), Utf8("16"), Utf8("30"), Utf8("33"), Utf8("14"), Utf8("13")]), customer.c_acctbal > Decimal128(Some(0),11,2)]

DataFusion Physical Plan
========================

SortPreservingMergeExec: [cntrycode@0 ASC NULLS LAST]
  SortExec: expr=[cntrycode@0 ASC NULLS LAST], preserve_partitioning=[true]
    ProjectionExec: expr=[cntrycode@0 as cntrycode, count(*)@1 as numcust, sum(custsale.c_acctbal)@2 as totacctbal]
      AggregateExec: mode=FinalPartitioned, gby=[cntrycode@0 as cntrycode], aggr=[count(*), sum(custsale.c_acctbal)]
        CoalesceBatchesExec: target_batch_size=8192
          RepartitionExec: partitioning=Hash([cntrycode@0], 2), input_partitions=2
            AggregateExec: mode=Partial, gby=[cntrycode@0 as cntrycode], aggr=[count(*), sum(custsale.c_acctbal)]
              ProjectionExec: expr=[substr(c_phone@1, 1, 2) as cntrycode, c_acctbal@2 as c_acctbal]
                NestedLoopJoinExec: join_type=Inner, filter=CAST(c_acctbal@0 AS Decimal128(15, 6)) > avg(customer.c_acctbal)@1
                  AggregateExec: mode=Final, gby=[], aggr=[avg(customer.c_acctbal)]
                    CoalescePartitionsExec
                      AggregateExec: mode=Partial, gby=[], aggr=[avg(customer.c_acctbal)]
                        ProjectionExec: expr=[c_acctbal@1 as c_acctbal]
                          CoalesceBatchesExec: target_batch_size=8192
                            FilterExec: c_acctbal@1 > Some(0),11,2 AND Use substr(c_phone@0, 1, 2) IN (SET) ([Literal { value: Utf8("24") }, Literal { value: Utf8("34") }, Literal { value: Utf8("16") }, Literal { value: Utf8("30") }, Literal { value: Utf8("33") }, Literal { value: Utf8("14") }, Literal { value: Utf8("13") }])
                              ParquetExec: file_groups={ ... }]) AND c_acctbal@5 > Some(0),11,2, pruning_predicate=CASE WHEN c_acctbal_null_count@1 = c_acctbal_row_count@2 THEN false ELSE c_acctbal_max@0 > Some(0),11,2 END AND CASE WHEN c_acctbal_null_count@1 = c_acctbal_row_count@2 THEN false ELSE c_acctbal_max@0 > Some(0),11,2 END, required_guarantees=[]
                  CoalesceBatchesExec: target_batch_size=8192
                    HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(c_custkey@0, o_custkey@0)], projection=[c_phone@1, c_acctbal@2]
                      CoalesceBatchesExec: target_batch_size=8192
                        RepartitionExec: partitioning=Hash([c_custkey@0], 2), input_partitions=2
                          CoalesceBatchesExec: target_batch_size=8192
                            FilterExec: Use substr(c_phone@1, 1, 2) IN (SET) ([Literal { value: Utf8("24") }, Literal { value: Utf8("34") }, Literal { value: Utf8("16") }, Literal { value: Utf8("30") }, Literal { value: Utf8("33") }, Literal { value: Utf8("14") }, Literal { value: Utf8("13") }])
                              ParquetExec: file_groups={ ... }])
                      CoalesceBatchesExec: target_batch_size=8192
                        RepartitionExec: partitioning=Hash([o_custkey@0], 2), input_partitions=2
                          ParquetExec: file_groups={ ... }, projection=[o_custkey]

DataFusion Ray Distributed Plan
===========

Query Stage #0 (2 -> 1):
RayShuffleWriterExec(stage_id=0, output_partitioning=UnknownPartitioning(2))
  AggregateExec: mode=Partial, gby=[], aggr=[avg(customer.c_acctbal)]
    ProjectionExec: expr=[c_acctbal@1 as c_acctbal]
      CoalesceBatchesExec: target_batch_size=8192
        FilterExec: c_acctbal@1 > Some(0),11,2 AND Use substr(c_phone@0, 1, 2) IN (SET) ([Literal { value: Utf8("24") }, Literal { value: Utf8("34") }, Literal { value: Utf8("16") }, Literal { value: Utf8("30") }, Literal { value: Utf8("33") }, Literal { value: Utf8("14") }, Literal { value: Utf8("13") }])
          ParquetExec: file_groups={ ... }]) AND c_acctbal@5 > Some(0),11,2, pruning_predicate=CASE WHEN c_acctbal_null_count@1 = c_acctbal_row_count@2 THEN false ELSE c_acctbal_max@0 > Some(0),11,2 END AND CASE WHEN c_acctbal_null_count@1 = c_acctbal_row_count@2 THEN false ELSE c_acctbal_max@0 > Some(0),11,2 END, required_guarantees=[]

Query Stage #1 (2 -> 2):
RayShuffleWriterExec(stage_id=1, output_partitioning=Hash([Column { name: "c_custkey", index: 0 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    FilterExec: Use substr(c_phone@1, 1, 2) IN (SET) ([Literal { value: Utf8("24") }, Literal { value: Utf8("34") }, Literal { value: Utf8("16") }, Literal { value: Utf8("30") }, Literal { value: Utf8("33") }, Literal { value: Utf8("14") }, Literal { value: Utf8("13") }])
      ParquetExec: file_groups={ ... }])

Query Stage #2 (2 -> 2):
RayShuffleWriterExec(stage_id=2, output_partitioning=Hash([Column { name: "o_custkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[o_custkey]

Query Stage #3 (2 -> 2):
RayShuffleWriterExec(stage_id=3, output_partitioning=Hash([Column { name: "cntrycode", index: 0 }], 2))
  AggregateExec: mode=Partial, gby=[cntrycode@0 as cntrycode], aggr=[count(*), sum(custsale.c_acctbal)]
    ProjectionExec: expr=[substr(c_phone@1, 1, 2) as cntrycode, c_acctbal@2 as c_acctbal]
      NestedLoopJoinExec: join_type=Inner, filter=CAST(c_acctbal@0 AS Decimal128(15, 6)) > avg(customer.c_acctbal)@1
        AggregateExec: mode=Final, gby=[], aggr=[avg(customer.c_acctbal)]
          CoalescePartitionsExec
            RayShuffleReaderExec(stage_id=0, input_partitioning=UnknownPartitioning(2))
        CoalesceBatchesExec: target_batch_size=8192
          HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(c_custkey@0, o_custkey@0)], projection=[c_phone@1, c_acctbal@2]
            CoalesceBatchesExec: target_batch_size=8192
              RayShuffleReaderExec(stage_id=1, input_partitioning=Hash([Column { name: "c_custkey", index: 0 }], 2))
            CoalesceBatchesExec: target_batch_size=8192
              RayShuffleReaderExec(stage_id=2, input_partitioning=Hash([Column { name: "o_custkey", index: 0 }], 2))

Query Stage #4 (2 -> 2):
RayShuffleWriterExec(stage_id=4, output_partitioning=Hash([Column { name: "cntrycode", index: 0 }], 2))
  SortExec: expr=[cntrycode@0 ASC NULLS LAST], preserve_partitioning=[true]
    ProjectionExec: expr=[cntrycode@0 as cntrycode, count(*)@1 as numcust, sum(custsale.c_acctbal)@2 as totacctbal]
      AggregateExec: mode=FinalPartitioned, gby=[cntrycode@0 as cntrycode], aggr=[count(*), sum(custsale.c_acctbal)]
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=3, input_partitioning=Hash([Column { name: "cntrycode", index: 0 }], 2))

Query Stage #5 (2 -> 1):
SortPreservingMergeExec: [cntrycode@0 ASC NULLS LAST]
  RayShuffleReaderExec(stage_id=4, input_partitioning=Hash([Column { name: "cntrycode", index: 0 }], 2))

