DataFusion Logical Plan
=======================

Sort: numwait DESC NULLS FIRST, supplier.s_name ASC NULLS LAST, fetch=100
  Projection: supplier.s_name, count(*) AS numwait
    Aggregate: groupBy=[[supplier.s_name]], aggr=[[count(Int64(1)) AS count(*)]]
      Projection: supplier.s_name
        LeftAnti Join: l1.l_orderkey = __correlated_sq_2.l_orderkey Filter: __correlated_sq_2.l_suppkey != l1.l_suppkey
          LeftSemi Join: l1.l_orderkey = __correlated_sq_1.l_orderkey Filter: __correlated_sq_1.l_suppkey != l1.l_suppkey
            Projection: supplier.s_name, l1.l_orderkey, l1.l_suppkey
              Inner Join: supplier.s_nationkey = nation.n_nationkey
                Projection: supplier.s_name, supplier.s_nationkey, l1.l_orderkey, l1.l_suppkey
                  Inner Join: l1.l_orderkey = orders.o_orderkey
                    Projection: supplier.s_name, supplier.s_nationkey, l1.l_orderkey, l1.l_suppkey
                      Inner Join: supplier.s_suppkey = l1.l_suppkey
                        TableScan: supplier projection=[s_suppkey, s_name, s_nationkey]
                        SubqueryAlias: l1
                          Projection: lineitem.l_orderkey, lineitem.l_suppkey
                            Filter: lineitem.l_receiptdate > lineitem.l_commitdate
                              TableScan: lineitem projection=[l_orderkey, l_suppkey, l_commitdate, l_receiptdate], partial_filters=[lineitem.l_receiptdate > lineitem.l_commitdate]
                    Projection: orders.o_orderkey
                      Filter: orders.o_orderstatus = Utf8("F")
                        TableScan: orders projection=[o_orderkey, o_orderstatus], partial_filters=[orders.o_orderstatus = Utf8("F")]
                Projection: nation.n_nationkey
                  Filter: nation.n_name = Utf8("ARGENTINA")
                    TableScan: nation projection=[n_nationkey, n_name], partial_filters=[nation.n_name = Utf8("ARGENTINA")]
            SubqueryAlias: __correlated_sq_1
              SubqueryAlias: l2
                TableScan: lineitem projection=[l_orderkey, l_suppkey]
          SubqueryAlias: __correlated_sq_2
            SubqueryAlias: l3
              Projection: lineitem.l_orderkey, lineitem.l_suppkey
                Filter: lineitem.l_receiptdate > lineitem.l_commitdate
                  TableScan: lineitem projection=[l_orderkey, l_suppkey, l_commitdate, l_receiptdate], partial_filters=[lineitem.l_receiptdate > lineitem.l_commitdate]

DataFusion Physical Plan
========================

SortPreservingMergeExec: [numwait@1 DESC,s_name@0 ASC NULLS LAST], fetch=100
  SortExec: TopK(fetch=100), expr=[numwait@1 DESC,s_name@0 ASC NULLS LAST], preserve_partitioning=[true]
    ProjectionExec: expr=[s_name@0 as s_name, count(*)@1 as numwait]
      AggregateExec: mode=FinalPartitioned, gby=[s_name@0 as s_name], aggr=[count(*)]
        CoalesceBatchesExec: target_batch_size=8192
          RepartitionExec: partitioning=Hash([s_name@0], 2), input_partitions=2
            AggregateExec: mode=Partial, gby=[s_name@0 as s_name], aggr=[count(*)]
              CoalesceBatchesExec: target_batch_size=8192
                HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(l_orderkey@1, l_orderkey@0)], filter=l_suppkey@1 != l_suppkey@0, projection=[s_name@0]
                  CoalesceBatchesExec: target_batch_size=8192
                    HashJoinExec: mode=Partitioned, join_type=LeftSemi, on=[(l_orderkey@1, l_orderkey@0)], filter=l_suppkey@1 != l_suppkey@0
                      CoalesceBatchesExec: target_batch_size=8192
                        RepartitionExec: partitioning=Hash([l_orderkey@1], 2), input_partitions=2
                          CoalesceBatchesExec: target_batch_size=8192
                            HashJoinExec: mode=Partitioned, join_type=Inner, on=[(n_nationkey@0, s_nationkey@1)], projection=[s_name@1, l_orderkey@3, l_suppkey@4]
                              CoalesceBatchesExec: target_batch_size=8192
                                RepartitionExec: partitioning=Hash([n_nationkey@0], 2), input_partitions=2
                                  RepartitionExec: partitioning=RoundRobinBatch(2), input_partitions=1
                                    CoalesceBatchesExec: target_batch_size=8192
                                      FilterExec: n_name@1 = ARGENTINA, projection=[n_nationkey@0]
                                        ParquetExec: file_groups={ ... }, projection=[n_nationkey, n_name], predicate=n_name@1 = ARGENTINA, pruning_predicate=CASE WHEN n_name_null_count@2 = n_name_row_count@3 THEN false ELSE n_name_min@0 <= ARGENTINA AND ARGENTINA <= n_name_max@1 END, required_guarantees=[n_name in (ARGENTINA)]
                              CoalesceBatchesExec: target_batch_size=8192
                                RepartitionExec: partitioning=Hash([s_nationkey@1], 2), input_partitions=2
                                  CoalesceBatchesExec: target_batch_size=8192
                                    HashJoinExec: mode=Partitioned, join_type=Inner, on=[(o_orderkey@0, l_orderkey@2)], projection=[s_name@1, s_nationkey@2, l_orderkey@3, l_suppkey@4]
                                      CoalesceBatchesExec: target_batch_size=8192
                                        RepartitionExec: partitioning=Hash([o_orderkey@0], 2), input_partitions=2
                                          CoalesceBatchesExec: target_batch_size=8192
                                            FilterExec: o_orderstatus@1 = F, projection=[o_orderkey@0]
                                              ParquetExec: file_groups={ ... }, projection=[o_orderkey, o_orderstatus], predicate=o_orderstatus@2 = F, pruning_predicate=CASE WHEN o_orderstatus_null_count@2 = o_orderstatus_row_count@3 THEN false ELSE o_orderstatus_min@0 <= F AND F <= o_orderstatus_max@1 END, required_guarantees=[o_orderstatus in (F)]
                                      CoalesceBatchesExec: target_batch_size=8192
                                        RepartitionExec: partitioning=Hash([l_orderkey@2], 2), input_partitions=2
                                          CoalesceBatchesExec: target_batch_size=8192
                                            HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_suppkey@0, l_suppkey@1)], projection=[s_name@1, s_nationkey@2, l_orderkey@3, l_suppkey@4]
                                              CoalesceBatchesExec: target_batch_size=8192
                                                RepartitionExec: partitioning=Hash([s_suppkey@0], 2), input_partitions=2
                                                  RepartitionExec: partitioning=RoundRobinBatch(2), input_partitions=1
                                                    ParquetExec: file_groups={ ... }, projection=[s_suppkey, s_name, s_nationkey]
                                              CoalesceBatchesExec: target_batch_size=8192
                                                RepartitionExec: partitioning=Hash([l_suppkey@1], 2), input_partitions=2
                                                  CoalesceBatchesExec: target_batch_size=8192
                                                    FilterExec: l_receiptdate@3 > l_commitdate@2, projection=[l_orderkey@0, l_suppkey@1]
                                                      ParquetExec: file_groups={ ... }, projection=[l_orderkey, l_suppkey, l_commitdate, l_receiptdate], predicate=l_receiptdate@12 > l_commitdate@11
                      CoalesceBatchesExec: target_batch_size=8192
                        RepartitionExec: partitioning=Hash([l_orderkey@0], 2), input_partitions=2
                          ParquetExec: file_groups={ ... }, projection=[l_orderkey, l_suppkey]
                  CoalesceBatchesExec: target_batch_size=8192
                    RepartitionExec: partitioning=Hash([l_orderkey@0], 2), input_partitions=2
                      CoalesceBatchesExec: target_batch_size=8192
                        FilterExec: l_receiptdate@3 > l_commitdate@2, projection=[l_orderkey@0, l_suppkey@1]
                          ParquetExec: file_groups={ ... }, projection=[l_orderkey, l_suppkey, l_commitdate, l_receiptdate], predicate=l_receiptdate@12 > l_commitdate@11

DataFusion Ray Distributed Plan
===========

Query Stage #0 (1 -> 2):
RayShuffleWriterExec(stage_id=0, output_partitioning=Hash([Column { name: "n_nationkey", index: 0 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    FilterExec: n_name@1 = ARGENTINA, projection=[n_nationkey@0]
      ParquetExec: file_groups={ ... }, projection=[n_nationkey, n_name], predicate=n_name@1 = ARGENTINA, pruning_predicate=CASE WHEN n_name_null_count@2 = n_name_row_count@3 THEN false ELSE n_name_min@0 <= ARGENTINA AND ARGENTINA <= n_name_max@1 END, required_guarantees=[n_name in (ARGENTINA)]

Query Stage #1 (2 -> 2):
RayShuffleWriterExec(stage_id=1, output_partitioning=Hash([Column { name: "o_orderkey", index: 0 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    FilterExec: o_orderstatus@1 = F, projection=[o_orderkey@0]
      ParquetExec: file_groups={ ... }, projection=[o_orderkey, o_orderstatus], predicate=o_orderstatus@2 = F, pruning_predicate=CASE WHEN o_orderstatus_null_count@2 = o_orderstatus_row_count@3 THEN false ELSE o_orderstatus_min@0 <= F AND F <= o_orderstatus_max@1 END, required_guarantees=[o_orderstatus in (F)]

Query Stage #2 (1 -> 2):
RayShuffleWriterExec(stage_id=2, output_partitioning=Hash([Column { name: "s_suppkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[s_suppkey, s_name, s_nationkey]

Query Stage #3 (2 -> 2):
RayShuffleWriterExec(stage_id=3, output_partitioning=Hash([Column { name: "l_suppkey", index: 1 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    FilterExec: l_receiptdate@3 > l_commitdate@2, projection=[l_orderkey@0, l_suppkey@1]
      ParquetExec: file_groups={ ... }, projection=[l_orderkey, l_suppkey, l_commitdate, l_receiptdate], predicate=l_receiptdate@12 > l_commitdate@11

Query Stage #4 (2 -> 2):
RayShuffleWriterExec(stage_id=4, output_partitioning=Hash([Column { name: "l_orderkey", index: 2 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    HashJoinExec: mode=Partitioned, join_type=Inner, on=[(s_suppkey@0, l_suppkey@1)], projection=[s_name@1, s_nationkey@2, l_orderkey@3, l_suppkey@4]
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=2, input_partitioning=Hash([Column { name: "s_suppkey", index: 0 }], 2))
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=3, input_partitioning=Hash([Column { name: "l_suppkey", index: 1 }], 2))

Query Stage #5 (2 -> 2):
RayShuffleWriterExec(stage_id=5, output_partitioning=Hash([Column { name: "s_nationkey", index: 1 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    HashJoinExec: mode=Partitioned, join_type=Inner, on=[(o_orderkey@0, l_orderkey@2)], projection=[s_name@1, s_nationkey@2, l_orderkey@3, l_suppkey@4]
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=1, input_partitioning=Hash([Column { name: "o_orderkey", index: 0 }], 2))
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=4, input_partitioning=Hash([Column { name: "l_orderkey", index: 2 }], 2))

Query Stage #6 (2 -> 2):
RayShuffleWriterExec(stage_id=6, output_partitioning=Hash([Column { name: "l_orderkey", index: 1 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    HashJoinExec: mode=Partitioned, join_type=Inner, on=[(n_nationkey@0, s_nationkey@1)], projection=[s_name@1, l_orderkey@3, l_suppkey@4]
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=0, input_partitioning=Hash([Column { name: "n_nationkey", index: 0 }], 2))
      CoalesceBatchesExec: target_batch_size=8192
        RayShuffleReaderExec(stage_id=5, input_partitioning=Hash([Column { name: "s_nationkey", index: 1 }], 2))

Query Stage #7 (2 -> 2):
RayShuffleWriterExec(stage_id=7, output_partitioning=Hash([Column { name: "l_orderkey", index: 0 }], 2))
  ParquetExec: file_groups={ ... }, projection=[l_orderkey, l_suppkey]

Query Stage #8 (2 -> 2):
RayShuffleWriterExec(stage_id=8, output_partitioning=Hash([Column { name: "l_orderkey", index: 0 }], 2))
  CoalesceBatchesExec: target_batch_size=8192
    FilterExec: l_receiptdate@3 > l_commitdate@2, projection=[l_orderkey@0, l_suppkey@1]
      ParquetExec: file_groups={ ... }, projection=[l_orderkey, l_suppkey, l_commitdate, l_receiptdate], predicate=l_receiptdate@12 > l_commitdate@11

Query Stage #9 (2 -> 2):
RayShuffleWriterExec(stage_id=9, output_partitioning=Hash([Column { name: "s_name", index: 0 }], 2))
  AggregateExec: mode=Partial, gby=[s_name@0 as s_name], aggr=[count(*)]
    CoalesceBatchesExec: target_batch_size=8192
      HashJoinExec: mode=Partitioned, join_type=LeftAnti, on=[(l_orderkey@1, l_orderkey@0)], filter=l_suppkey@1 != l_suppkey@0, projection=[s_name@0]
        CoalesceBatchesExec: target_batch_size=8192
          HashJoinExec: mode=Partitioned, join_type=LeftSemi, on=[(l_orderkey@1, l_orderkey@0)], filter=l_suppkey@1 != l_suppkey@0
            CoalesceBatchesExec: target_batch_size=8192
              RayShuffleReaderExec(stage_id=6, input_partitioning=Hash([Column { name: "l_orderkey", index: 1 }], 2))
            CoalesceBatchesExec: target_batch_size=8192
              RayShuffleReaderExec(stage_id=7, input_partitioning=Hash([Column { name: "l_orderkey", index: 0 }], 2))
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=8, input_partitioning=Hash([Column { name: "l_orderkey", index: 0 }], 2))

Query Stage #10 (2 -> 2):
RayShuffleWriterExec(stage_id=10, output_partitioning=Hash([Column { name: "s_name", index: 0 }], 2))
  SortExec: TopK(fetch=100), expr=[numwait@1 DESC,s_name@0 ASC NULLS LAST], preserve_partitioning=[true]
    ProjectionExec: expr=[s_name@0 as s_name, count(*)@1 as numwait]
      AggregateExec: mode=FinalPartitioned, gby=[s_name@0 as s_name], aggr=[count(*)]
        CoalesceBatchesExec: target_batch_size=8192
          RayShuffleReaderExec(stage_id=9, input_partitioning=Hash([Column { name: "s_name", index: 0 }], 2))

Query Stage #11 (2 -> 1):
SortPreservingMergeExec: [numwait@1 DESC,s_name@0 ASC NULLS LAST], fetch=100
  RayShuffleReaderExec(stage_id=10, input_partitioning=Hash([Column { name: "s_name", index: 0 }], 2))

