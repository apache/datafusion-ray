syntax = "proto3";

package datafusion_ray.protobuf;

option java_multiple_files = true;
option java_package = "datafusion_ray.protobuf";
option java_outer_classname = "RayDataFusionProto";

import "datafusion_common.proto";
import "datafusion.proto";

message RayStageReaderExecNode {
  // schema of the stage we will consume
  datafusion_common.Schema schema = 1;
  // properties of the stage we will consume
  datafusion.Partitioning partitioning = 2;
  // stage to read from
  uint64 stage_id = 3;
}

// the simplicity of the decoder in src/codec.rs currently requires a different byte
// representation per message.  Hence the dummy fields.
//
// I'll come back to this and sort it out.  Its not super critical as the plans are
// only exchanged at the start of queries, not during execution.

message MaxRowsExecNode {
  uint64 max_rows = 1;
}

message PrefetchExecNode {
  uint32 dummy = 1;
  uint64 buf_size = 2;
}

message PartitionIsolatorExecNode {
  float dummy = 1;
  uint64 partition_count = 2;  
}

// TODO: why, if FlightTicketData has  the uint64 field first can it also be decoded also
// MaxRowsExecNode?  There is something I don't understand here
message FlightTicketData {
  // stage id of the stream
  // parittion id of the stream
  bool dummy = 1;
  uint64 partition = 2;
}

